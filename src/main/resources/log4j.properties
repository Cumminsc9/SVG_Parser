#========================================= Logging Information =========================================================
# To add logging to a class use the following;
#   private static final Logger logger = Logger.getLogger( ******.class.getName() );
# Where * replace with the Java class name, you can then call the logger as so;
#   logger.debug( "Log Message!" );
# Ensure the logging level is correct for the type of log message you expect, and take note of the log hierarchy below
# and the logging table with descriptions! You can edit the 'rootLogger' to 'ALL' display all logs if required but
# remember to change it back to 'INFO' or a higher state once finished

# Logging hierarchy -  ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF.

# Level	 -  Description
# ALL	 -  All levels including custom levels.
# DEBUG	 -  Designates fine-grained informational events that are most useful to debug an application.
# ERROR	 -  Designates error events that might still allow the application to continue running.
# FATAL	 -  Designates very severe error events that will presumably lead the application to abort.
# INFO	 -  Designates informational messages that highlight the progress of the application at coarse-grained level.
# OFF	 -  The highest possible rank and is intended to turn off logging.
# TRACE	 -  Designates finer-grained informational events than the DEBUG.
# WARN	 -  Designates potentially harmful situations.
#========================================= Logging Information =========================================================

# Root logger option
log4j.rootLogger=INFO, file

# Direct log messages to a log file
log4j.appender.file=org.apache.log4j.RollingFileAppender

log4j.appender.file.File=src\\main\\resources\\logs\\logging.log
log4j.appender.file.MaxFileSize=10MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{dd-MM-yyyy HH:mm:ss} %-5p %c{1}:%L - %m%n